// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"community-blogger/internal/app/userrpc"
	"community-blogger/internal/app/userrpc/grpcserver"
	"community-blogger/internal/app/userrpc/repositories"
	"community-blogger/internal/app/userrpc/rpc"
	"community-blogger/internal/pkg/app"
	"community-blogger/internal/pkg/config"
	"community-blogger/internal/pkg/database"
	"community-blogger/internal/pkg/log"
	"community-blogger/internal/pkg/transports/grpc"
	"github.com/google/wire"
)

// Injectors from wire.go:

func CreateApp(cf string) (*app.Application, error) {
	viper, err := config.New(cf)
	if err != nil {
		return nil, err
	}
	options, err := log.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	logger, err := log.New(options)
	if err != nil {
		return nil, err
	}
	userrpcOptions, err := userrpc.NewOptions(viper, logger)
	if err != nil {
		return nil, err
	}
	serverOptions, err := grpc.NewServerOptions(viper, logger)
	if err != nil {
		return nil, err
	}
	databaseOptions, err := database.NewOptions(viper, logger)
	if err != nil {
		return nil, err
	}
	databaseDatabase, err := database.New(databaseOptions)
	if err != nil {
		return nil, err
	}
	userRepository := repositories.NewMysqlUserRepository(logger, databaseDatabase)
	userRPCServer := grpcserver.NewUserRPCServer(logger, viper, userRepository)
	userSer := rpc.NewUserSer(logger, userRPCServer)
	initServers := rpc.CreateInitServersFn(userSer)
	server, err := grpc.NewServer(serverOptions, logger, initServers)
	if err != nil {
		return nil, err
	}
	application, err := userrpc.NewApp(userrpcOptions, logger, server)
	if err != nil {
		return nil, err
	}
	return application, nil
}

// wire.go:

var providerSet = wire.NewSet(log.ProviderSet, config.ProviderSet, database.ProviderSet, repositories.ProviderSet, grpcserver.ProviderSet, grpc.ProviderSet, userrpc.ProviderSet, rpc.ProviderSet)
