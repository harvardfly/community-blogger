// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"github.com/google/wire"
	"community-blogger/internal/app/article"
	"community-blogger/internal/app/article/controllers"
	"community-blogger/internal/app/article/repositories"
	"community-blogger/internal/app/article/services"
	"community-blogger/internal/pkg/app"
	"community-blogger/internal/pkg/config"
	"community-blogger/internal/pkg/database"
	"community-blogger/internal/pkg/jaeger"
	"community-blogger/internal/pkg/log"
	"community-blogger/internal/pkg/redis"
	"community-blogger/internal/pkg/transports/http"
)

// Injectors from wire.go:

func CreateApp(cf string) (*app.Application, error) {
	viper, err := config.New(cf)
	if err != nil {
		return nil, err
	}
	options, err := log.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	logger, err := log.New(options)
	if err != nil {
		return nil, err
	}
	articleOptions, err := article.NewOptions(viper, logger)
	if err != nil {
		return nil, err
	}
	httpOptions, err := http.NewOptions(viper, logger)
	if err != nil {
		return nil, err
	}
	redisOptions, err := redis.NewOptions(viper, logger)
	if err != nil {
		return nil, err
	}
	pool, err := redis.New(redisOptions)
	if err != nil {
		return nil, err
	}
	jaegerOptions, err := jaeger.NewOptions(viper, logger)
	if err != nil {
		return nil, err
	}
	tracer, err := jaeger.New(jaegerOptions)
	if err != nil {
		return nil, err
	}
	databaseOptions, err := database.NewOptions(viper, logger)
	if err != nil {
		return nil, err
	}
	databaseDatabase, err := database.New(databaseOptions)
	if err != nil {
		return nil, err
	}
	articleRepository := repositories.NewMysqlArticleRepository(logger, databaseDatabase)
	articleService := services.NewArticleService(logger, viper, pool, tracer, articleRepository)
	articleController := controllers.NewArticleController(logger, articleService)
	initControllers := controllers.CreateInitControllersFn(articleController)
	engine := http.NewRouter(httpOptions, logger, initControllers)
	server, err := http.New(httpOptions, logger, engine)
	if err != nil {
		return nil, err
	}
	application, err := article.NewApp(articleOptions, logger, server)
	if err != nil {
		return nil, err
	}
	return application, nil
}

// wire.go:

var providerSet = wire.NewSet(log.ProviderSet, config.ProviderSet, database.ProviderSet, redis.ProviderSet, jaeger.ProviderSet, repositories.ProviderSet, services.ProviderSet, http.ProviderSet, article.ProviderSet, controllers.ProviderSet)
