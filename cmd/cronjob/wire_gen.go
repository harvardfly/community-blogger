// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"community-blogger/internal/app/cronjob"
	"community-blogger/internal/app/cronjob/services"
	"community-blogger/internal/pkg/app"
	"community-blogger/internal/pkg/config"
	"community-blogger/internal/pkg/es"
	"community-blogger/internal/pkg/log"
	"community-blogger/internal/pkg/redis"
	"community-blogger/internal/pkg/transports/cron"
	"github.com/google/wire"
)

// Injectors from wire.go:

func CreateApp(cf string) (*app.Application, error) {
	viper, err := config.New(cf)
	if err != nil {
		return nil, err
	}
	options, err := log.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	logger, err := log.New(options)
	if err != nil {
		return nil, err
	}
	cronjobOptions, err := cronjob.NewOptions(viper, logger)
	if err != nil {
		return nil, err
	}
	cronOptions, err := cron.NewOptions(viper, logger)
	if err != nil {
		return nil, err
	}
	redisOptions, err := redis.NewOptions(viper, logger)
	if err != nil {
		return nil, err
	}
	pool, err := redis.New(redisOptions)
	if err != nil {
		return nil, err
	}
	esOptions := es.NewOptions(viper, logger)
	client := es.New(esOptions, logger)
	defaultCronJobService := services.NewDefaultCronJobService(logger, viper, pool, client)
	initServers := services.CreateInitServersFn(defaultCronJobService)
	server, err := cron.New(cronOptions, logger, initServers)
	if err != nil {
		return nil, err
	}
	application, err := cronjob.NewApp(cronjobOptions, logger, server)
	if err != nil {
		return nil, err
	}
	return application, nil
}

// wire.go:

var providerSet = wire.NewSet(log.ProviderSet, config.ProviderSet, redis.ProviderSet, es.ProviderSet, cron.ProviderSet, cronjob.ProviderSet, services.ProviderSet)
