// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package controllers

import (
	"community-blogger/internal/app/article/repositories"
	"community-blogger/internal/app/article/services"
	"community-blogger/internal/pkg/config"
	"community-blogger/internal/pkg/es"
	"community-blogger/internal/pkg/jaeger"
	"community-blogger/internal/pkg/kafka"
	"community-blogger/internal/pkg/log"
	"community-blogger/internal/pkg/redis"
	"github.com/google/wire"
)

// Injectors from wire.go:

func CreateArticleController(cf string, rpo repositories.ArticleRepository) (*ArticleController, error) {
	viper, err := config.New(cf)
	if err != nil {
		return nil, err
	}
	options, err := log.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	logger, err := log.New(options)
	if err != nil {
		return nil, err
	}
	redisOptions, err := redis.NewOptions(viper, logger)
	if err != nil {
		return nil, err
	}
	pool, err := redis.New(redisOptions)
	if err != nil {
		return nil, err
	}
	jaegerOptions, err := jaeger.NewOptions(viper, logger)
	if err != nil {
		return nil, err
	}
	tracer, err := jaeger.New(jaegerOptions)
	if err != nil {
		return nil, err
	}
	esOptions, err := es.NewOptions(viper, logger)
	if err != nil {
		return nil, err
	}
	client, err := es.New(esOptions, logger)
	if err != nil {
		return nil, err
	}
	articleService := services.NewArticleService(logger, viper, pool, tracer, rpo, client)
	articleController := NewArticleController(logger, articleService)
	return articleController, nil
}

// wire.go:

var testProviderSet = wire.NewSet(log.ProviderSet, config.ProviderSet, redis.ProviderSet, jaeger.ProviderSet, es.ProviderSet, kafka.ProviderSet, services.ProviderSet, ProviderSet)
